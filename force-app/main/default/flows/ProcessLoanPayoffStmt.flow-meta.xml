<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <constants>
        <description>Stores the value indicating the preference to receive statements by post.</description>
        <name>ViaPostValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>No</stringValue>
        </value>
    </constants>
    <decisions>
        <description>Determines if the loan payoff statement request case is closed.</description>
        <name>IsCaseClosed</name>
        <label>Is Case Closed?</label>
        <locationX>226</locationX>
        <locationY>287</locationY>
        <defaultConnector>
            <targetReference>NotifyStakeholdersOfRequest</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>IsClosed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Case.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>PerformLoanPayoffStatementRequestUpdateandPostUpdateActions</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines if the user has selected the checkbox to receive the statement via post.</description>
        <name>IsReceiveStatementviaPostSelected</name>
        <label>Is Receive Statement via Post Selected?</label>
        <locationX>402</locationX>
        <locationY>503</locationY>
        <defaultConnector>
            <targetReference>VerifyAddressForLoanPayoffStatementRequest</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Yes</defaultConnectorLabel>
        <rules>
            <name>ReceiveStatementByPost</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.receiveStatementViaPost</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>ViaPostValue</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ProcessLoanPayoffStatementRequestAndNotifyStakeholders</targetReference>
            </connector>
            <label>No (Default)</label>
        </rules>
    </decisions>
    <description>Notifies the account that a loan payoff statement request was made and attempts to process it. If the attempt is successful, closes the associated case and notifies the account. If the attempt fails, notifies the case owner.</description>
    <environments>Default</environments>
    <interviewLabel>Process Loan Payoff Statement Request {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Process Loan Payoff Statement Request</label>
    <orchestratedStages>
        <description>Notifies the account associated with the triggering service catalog request that a loan payoff statement request has been made for the account. If your process requires that you notify other stakeholders, add more steps to notify them in this stage.</description>
        <name>NotifyStakeholdersOfRequest</name>
        <label>Notify Stakeholders of Request</label>
        <locationX>402</locationX>
        <locationY>395</locationY>
        <connector>
            <targetReference>IsReceiveStatementviaPostSelected</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Emails the person associated with the account of the triggering service catalog request record when a loan payoff statement request has been made for the account and when the associated email can be determined.</description>
            <name>NotifyAccountOfLoanPayoffStatementRequest</name>
            <actionName>serviceprocess__RqstLoanPayoffStmt</actionName>
            <actionType>stepBackground</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Case.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>caseId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>inputRecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Notify Account of Loan Payoff Statement Request</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>true</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <description>Update the request for loan payoff statement, send an email to the customer, and update the case status.</description>
        <name>PerformLoanPayoffStatementRequestUpdateandPostUpdateActions</name>
        <label>Perform Loan Payoff Statement Request Update and Post-Update Actions</label>
        <locationX>50</locationX>
        <locationY>395</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Calls an asynchronous Apex action to update a service catalog request record for a request to loan payoff statement. Updates a specified case&apos;s status to closed if the request to loan payoff statement was updated. Otherwise, displays an error to the flow user.</description>
            <name>AttemptLoanPayoffStatementRequestandDisplayCaseStatus</name>
            <actionName>serviceprocess__UpdateLoanPayoffStmt</actionName>
            <actionType>stepBackground</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Case.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>accountEmail</name>
                <value>
                    <elementReference>$Record.Case.Account.PersonEmail</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>accountName</name>
                <value>
                    <elementReference>$Record.Case.Account.Name</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseNumber</name>
                <value>
                    <elementReference>$Record.Case.CaseNumber</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>personContactId</name>
                <value>
                    <elementReference>$Record.Case.Account.PersonContact.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Attempt Loan Payoff Statement Request and Display Case Status</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>true</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <description>Attempts to process the loan payoff statement request, close the case, and notify the account associated with the triggering service catalog request. If your process requires that you notify other stakeholders about the success or case change in status, add more steps to notify them in this stage.</description>
        <name>ProcessLoanPayoffStatementRequestAndNotifyStakeholders</name>
        <label>Process Loan Payoff Statement Request and Notify Stakeholders</label>
        <locationX>402</locationX>
        <locationY>803</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Processes a Loan Payoff Statement request and, if the request succeeds, closes the associated case. If an email is available and the case is closed, emails the customer to notify them that their request was processed and the case is closed. If the Loan Payoff Statement request fails, returns True for isProcessServiceCatalogRequestFailed and an error message for failureMessage.</description>
            <name>ProcessLoanPayoffStatementRequestAndNotifyAccount</name>
            <actionName>serviceprocess__UpdateLoanPayoffStmt</actionName>
            <actionType>stepBackground</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Case.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>accountEmail</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.accountEmail</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>accountName</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.accountName</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseNumber</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.caseNumber</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>attachmentStatus</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.EmailWithAttachmentStatus</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>personContactId</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.personContactId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>isSentViaEmail</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.receiveStatementViaEmail</elementReference>
                </value>
            </inputParameters>
            <label>Process Loan Payoff Statement Request and Notify Account</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>true</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <description>Verifies the address associated with the Loan Payoff Statement Request.</description>
        <name>VerifyAddressForLoanPayoffStatementRequest</name>
        <label>Verify Address for Loan Payoff Statement Request</label>
        <locationX>490</locationX>
        <locationY>611</locationY>
        <connector>
            <targetReference>ProcessLoanPayoffStatementRequestAndNotifyStakeholders</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Allows flow user to review the address details for a loan payoff statement request.</description>
            <name>ReviewAddressDetailsforLoanPayoffStatementRequest</name>
            <actionName>serviceprocess__RvwLoanPayoffAddress</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Case.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>accountName</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.accountName</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>addressLine1</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.addressLine1</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>addressLine2</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.addressLine2</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseId</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.caseId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>city</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.city</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>country</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.country</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>postalCode</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.postalCode</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>state</name>
                <value>
                    <elementReference>NotifyAccountOfLoanPayoffStatementRequest.Outputs.state</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <label>Review Address Details</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Orchestrator</processType>
    <runInMode>SystemModeWithoutSharing</runInMode>
    <sourceTemplate>serviceprocess__ProcessLoanPayoffStmt</sourceTemplate>
    <start>
        <locationX>100</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>IsCaseClosed</targetReference>
        </connector>
        <filterFormula>{!$Record.SvcCatalogItemDefinition.DeveloperName}=&apos;RequestLoanPayoffStatements&apos;</filterFormula>
        <object>SvcCatalogRequest</object>
        <recordTriggerType>Create</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <variables>
        <name>test</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
